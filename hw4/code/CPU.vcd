$date
	Mon Nov 20 16:02:32 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var reg 1 ! Clk $end
$var reg 1 " Reset $end
$var reg 1 # Start $end
$var integer 32 $ counter [31:0] $end
$var integer 32 % i [31:0] $end
$var integer 32 & outfile [31:0] $end
$scope module CPU $end
$var wire 1 ! clk_i $end
$var wire 1 ' ctrl_regwrite $end
$var wire 1 " rst_i $end
$var wire 1 # start_i $end
$var wire 32 ( rtData_o [31:0] $end
$var wire 32 ) rsData_o [31:0] $end
$var wire 5 * regdst_o [4:0] $end
$var wire 32 + pc_i [31:0] $end
$var wire 32 , inst_addr [31:0] $end
$var wire 32 - inst [31:0] $end
$var wire 32 . imm32 [31:0] $end
$var wire 1 / ctrl_regdst $end
$var wire 1 0 ctrl_alusrc $end
$var wire 2 1 ctrl_aluop [1:0] $end
$var wire 32 2 alusrc_o [31:0] $end
$var wire 32 3 aluop_o [31:0] $end
$var wire 3 4 aluctrl [2:0] $end
$scope module ALU $end
$var wire 1 5 Zero_o $end
$var wire 32 6 data2_i [31:0] $end
$var wire 32 7 data1_i [31:0] $end
$var wire 3 8 ALUCtrl_i [2:0] $end
$var reg 32 9 data_o [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 6 : funct_i [5:0] $end
$var wire 2 ; ALUOp_i [1:0] $end
$var reg 3 < ALUCtrl_o [2:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 = data2_i [31:0] $end
$var wire 32 > data_o [31:0] $end
$var wire 32 ? data1_i [31:0] $end
$upscope $end
$scope module Control $end
$var wire 6 @ Op_i [5:0] $end
$var wire 1 / RegDst_o $end
$var wire 1 ' RegWrite_o $end
$var wire 1 0 ALUSrc_o $end
$var wire 2 A ALUOp_o [1:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 B instr_o [31:0] $end
$var wire 32 C addr_i [31:0] $end
$upscope $end
$scope module MUX_ALUSrc $end
$var wire 1 0 select_i $end
$var wire 32 D data2_i [31:0] $end
$var wire 32 E data1_i [31:0] $end
$var reg 32 F data_o [31:0] $end
$upscope $end
$scope module MUX_RegDst $end
$var wire 5 G data1_i [4:0] $end
$var wire 5 H data2_i [4:0] $end
$var wire 1 / select_i $end
$var reg 5 I data_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 J pc_i [31:0] $end
$var wire 1 " rst_i $end
$var wire 1 # start_i $end
$var reg 32 K pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 L RDaddr_i [4:0] $end
$var wire 32 M RDdata_i [31:0] $end
$var wire 5 N RSaddr_i [4:0] $end
$var wire 32 O RSdata_o [31:0] $end
$var wire 5 P RTaddr_i [4:0] $end
$var wire 32 Q RTdata_o [31:0] $end
$var wire 1 ' RegWrite_i $end
$var wire 1 ! clk_i $end
$upscope $end
$scope module Sign_Extend $end
$var wire 16 R data_i [15:0] $end
$var wire 32 S data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000000100000 S
b100000000100000 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b1000 L
b0 K
b100 J
b1000 I
b1000 H
b0 G
b0 F
b0 E
b100000000100000 D
b0 C
b100000000100000 B
b0 A
b0 @
b0 ?
b100 >
b100 =
b0 <
b0 ;
b100000 :
b0 9
b0 8
b0 7
b0 6
05
b0 4
b0 3
b0 2
b0 1
00
1/
b100000000100000 .
b100000000100000 -
b0 ,
b100 +
b1000 *
b0 )
b0 (
1'
b11 &
b100000 %
b0 $
0#
0"
0!
$end
#12
1#
1"
#25
b1010 3
b1010 9
b1010 M
0/
b1010 2
b1010 6
b1010 F
b1001 *
b1001 I
b1001 L
b1 1
b1 ;
b1 A
10
b1010 :
b1010 .
b1010 D
b1010 S
b1010 R
b0 H
b1001 G
b1001 P
b1000 @
b100000000010010000000000001010 -
b100000000010010000000000001010 B
b1000 +
b1000 >
b1000 J
b100 ,
b100 ?
b100 C
b100 K
b1 $
1!
#50
0!
#75
b1101 3
b1101 9
b1101 M
b1010 *
b1010 I
b1010 L
b1101 2
b1101 6
b1101 F
b1101 :
b1101 .
b1101 D
b1101 S
b1101 R
b1010 G
b1010 P
b100000000010100000000000001101 -
b100000000010100000000000001101 B
b1100 +
b1100 >
b1100 J
b1000 ,
b1000 ?
b1000 C
b1000 K
b0 (
b0 E
b0 Q
b10 $
1!
#100
0!
#125
1/
b100 4
b100 8
b100 <
b1011 *
b1011 I
b1011 L
b1010 2
b1010 6
b1010 F
b1100100 3
b1100100 9
b1100100 M
b0 1
b0 ;
b0 A
00
b11000 :
b101100000011000 .
b101100000011000 D
b101100000011000 S
b101100000011000 R
b1011 H
b1001 G
b1001 P
b1010 )
b1010 7
b1010 O
b1001 N
b0 @
b1001010010101100000011000 -
b1001010010101100000011000 B
b10000 +
b10000 >
b10000 J
b1100 ,
b1100 ?
b1100 C
b1100 K
b1010 (
b1010 E
b1010 Q
b11 $
1!
#150
0!
#175
b1011 3
b1011 9
b1011 M
0/
b0 4
b0 8
b0 <
b1 2
b1 6
b1 F
b1001 *
b1001 I
b1001 L
b1 1
b1 ;
b1 A
10
b1 :
b1 .
b1 D
b1 S
b1 R
b0 H
b1000 @
b100001001010010000000000000001 -
b100001001010010000000000000001 B
b10100 +
b10100 >
b10100 J
b10000 ,
b10000 ?
b10000 C
b10000 K
b100 $
1!
#200
0!
#225
b1010 *
b1010 I
b1010 L
1/
b1 4
b1 8
b1 <
b1011 2
b1011 6
b1011 F
b0 1
b0 ;
b0 A
00
b100010 :
b101000000100010 .
b101000000100010 D
b101000000100010 S
b101000000100010 R
b1010 H
b1010 N
b0 @
b1010010010101000000100010 -
b1010010010101000000100010 B
b10 3
b10 9
b10 M
b11000 +
b11000 >
b11000 J
b10100 ,
b10100 ?
b10100 C
b10100 K
b1101 )
b1101 7
b1101 O
b1011 (
b1011 E
b1011 Q
b101 $
1!
#250
0!
#275
b10 4
b10 8
b10 <
b1011 *
b1011 I
b1011 L
b10 2
b10 6
b10 F
b100100 :
b101100000100100 .
b101100000100100 D
b101100000100100 S
b101100000100100 R
b1011 H
b1010 G
b10 (
b10 E
b10 Q
b1010 P
b1001 N
b1001010100101100000100100 -
b1001010100101100000100100 B
b10 3
b10 9
b10 M
b11100 +
b11100 >
b11100 J
b11000 ,
b11000 ?
b11000 C
b11000 K
b1011 )
b1011 7
b1011 O
b110 $
1!
#300
0!
#325
b11 4
b11 8
b11 <
b1100 *
b1100 I
b1100 L
b100101 :
b110000000100101 .
b110000000100101 D
b110000000100101 S
b110000000100101 R
b1100 H
b1011 G
b1011 P
b10 )
b10 7
b10 O
b1010 N
b1010010110110000000100101 -
b1010010110110000000100101 B
b100000 +
b100000 >
b100000 J
b11100 ,
b11100 ?
b11100 C
b11100 K
b111 $
1!
#350
0!
#375
b0 3
b0 9
b0 M
b0 *
b0 I
b0 L
b0 2
b0 6
b0 F
b0 :
b0 .
b0 D
b0 S
b0 R
b0 H
b0 G
b0 (
b0 E
b0 Q
b0 P
b0 )
b0 7
b0 O
b0 N
b0 -
b0 B
b100100 +
b100100 >
b100100 J
b100000 ,
b100000 ?
b100000 C
b100000 K
b1000 $
1!
#400
0!
#425
b101000 +
b101000 >
b101000 J
b100100 ,
b100100 ?
b100100 C
b100100 K
b1001 $
1!
#450
0!
#475
b101100 +
b101100 >
b101100 J
b101000 ,
b101000 ?
b101000 C
b101000 K
b1010 $
1!
#500
0!
#525
b110000 +
b110000 >
b110000 J
b101100 ,
b101100 ?
b101100 C
b101100 K
b1011 $
1!
#550
0!
#575
b110100 +
b110100 >
b110100 J
b110000 ,
b110000 ?
b110000 C
b110000 K
b1100 $
1!
#600
0!
#625
b111000 +
b111000 >
b111000 J
b110100 ,
b110100 ?
b110100 C
b110100 K
b1101 $
1!
#650
0!
#675
b111100 +
b111100 >
b111100 J
b111000 ,
b111000 ?
b111000 C
b111000 K
b1110 $
1!
#700
0!
#725
b1000000 +
b1000000 >
b1000000 J
b111100 ,
b111100 ?
b111100 C
b111100 K
b1111 $
1!
#750
0!
#775
b1000100 +
b1000100 >
b1000100 J
b1000000 ,
b1000000 ?
b1000000 C
b1000000 K
b10000 $
1!
#800
0!
#825
b1001000 +
b1001000 >
b1001000 J
b1000100 ,
b1000100 ?
b1000100 C
b1000100 K
b10001 $
1!
#850
0!
#875
b1001100 +
b1001100 >
b1001100 J
b1001000 ,
b1001000 ?
b1001000 C
b1001000 K
b10010 $
1!
#900
0!
#925
b1010000 +
b1010000 >
b1010000 J
b1001100 ,
b1001100 ?
b1001100 C
b1001100 K
b10011 $
1!
#950
0!
#975
b1010100 +
b1010100 >
b1010100 J
b1010000 ,
b1010000 ?
b1010000 C
b1010000 K
b10100 $
1!
#1000
0!
#1025
b1011000 +
b1011000 >
b1011000 J
b1010100 ,
b1010100 ?
b1010100 C
b1010100 K
b10101 $
1!
#1050
0!
#1075
b1011100 +
b1011100 >
b1011100 J
b1011000 ,
b1011000 ?
b1011000 C
b1011000 K
b10110 $
1!
#1100
0!
#1125
b1100000 +
b1100000 >
b1100000 J
b1011100 ,
b1011100 ?
b1011100 C
b1011100 K
b10111 $
1!
#1150
0!
#1175
b1100100 +
b1100100 >
b1100100 J
b1100000 ,
b1100000 ?
b1100000 C
b1100000 K
b11000 $
1!
#1200
0!
#1225
b1101000 +
b1101000 >
b1101000 J
b1100100 ,
b1100100 ?
b1100100 C
b1100100 K
b11001 $
1!
#1250
0!
#1275
b1101100 +
b1101100 >
b1101100 J
b1101000 ,
b1101000 ?
b1101000 C
b1101000 K
b11010 $
1!
#1300
0!
#1325
b1110000 +
b1110000 >
b1110000 J
b1101100 ,
b1101100 ?
b1101100 C
b1101100 K
b11011 $
1!
#1350
0!
#1375
b1110100 +
b1110100 >
b1110100 J
b1110000 ,
b1110000 ?
b1110000 C
b1110000 K
b11100 $
1!
#1400
0!
#1425
b1111000 +
b1111000 >
b1111000 J
b1110100 ,
b1110100 ?
b1110100 C
b1110100 K
b11101 $
1!
#1450
0!
#1475
b1111100 +
b1111100 >
b1111100 J
b1111000 ,
b1111000 ?
b1111000 C
b1111000 K
b11110 $
1!
#1500
0!
#1525
